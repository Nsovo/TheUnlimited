// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheUnlimited_Backend_.Models;

#nullable disable

namespace TheUnlimited_Backend_.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TestQuestion", b =>
                {
                    b.Property<int>("TestQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestQuestionID"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.HasKey("TestQuestionID");

                    b.HasIndex("TestID");

                    b.ToTable("TestQuestions");

                    b.HasData(
                        new
                        {
                            TestQuestionID = 1,
                            QuestionText = "What is the guaranteed commission for new agents per working day?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 2,
                            QuestionText = "What is the minimum dial time required for a full day's commission?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 3,
                            QuestionText = "How much is paid for dial time between 120 to 149 minutes?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 4,
                            QuestionText = "What is the commission rate for 1-23 adjusted pieces below 40% Debi Check?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 5,
                            QuestionText = "What is the default Success Rate (SR) for new agents in the Motor category?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 6,
                            QuestionText = "What is the commission for 24+ adjusted pieces above 40% Debi Check?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 7,
                            QuestionText = "How many days are included in the first pay cycle of 2023?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 8,
                            QuestionText = "What is the commission rate for 24+ adjusted pieces below 40% Debi Check?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 9,
                            QuestionText = "What is the qualifying criteria for a Trainer override?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 10,
                            QuestionText = "How many personal adjusted pieces are required for a Trainee Owner override?",
                            TestID = 1
                        },
                        new
                        {
                            TestQuestionID = 11,
                            QuestionText = "What is the guaranteed commission for new agents per working day in the Persal category?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 12,
                            QuestionText = "What is the commission rate for 1-16 adjusted pieces in Persal?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 13,
                            QuestionText = "What is the default SR for new agents in Persal?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 14,
                            QuestionText = "What is the qualifying criteria for a Trainer override in Persal?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 15,
                            QuestionText = "What is the commission for 17+ adjusted pieces in the Persal Gap category?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 16,
                            QuestionText = "How many days are included in the second pay cycle of 2023?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 17,
                            QuestionText = "What is the commission rate for 1-16 adjusted pieces in Persal STD Upgrade?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 18,
                            QuestionText = "How many personal adjusted pieces are required for a Trainee Owner override in Persal?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 19,
                            QuestionText = "What is the commission rate for 17+ adjusted pieces in Persal Code GAP Upgrade?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 20,
                            QuestionText = "What is the dial time required for a half day's commission?",
                            TestID = 2
                        },
                        new
                        {
                            TestQuestionID = 21,
                            QuestionText = "What is the guaranteed commission for new agents per working day in the Debit Order category?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 22,
                            QuestionText = "What is the commission rate for 1-19 adjusted pieces below 40% Debi Check in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 23,
                            QuestionText = "What is the default SR for new agents in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 24,
                            QuestionText = "What is the qualifying criteria for a Trainer override in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 25,
                            QuestionText = "What is the commission for 20+ adjusted pieces above 40% Debi Check in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 26,
                            QuestionText = "How many days are included in the third pay cycle of 2023?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 27,
                            QuestionText = "What is the commission rate for 1-19 adjusted pieces above 40% Debi Check in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 28,
                            QuestionText = "How many personal adjusted pieces are required for a Trainee Owner override in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 29,
                            QuestionText = "What is the commission rate for 20+ adjusted pieces below 40% Debi Check in Debit Order?",
                            TestID = 3
                        },
                        new
                        {
                            TestQuestionID = 30,
                            QuestionText = "What is the dial time required for a full day's commission in Debit Order?",
                            TestID = 3
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Agent", b =>
                {
                    b.Property<int>("AgentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentID"));

                    b.Property<int>("AgentLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AgentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AgentStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AgentTerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MerchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficeCode")
                        .HasColumnType("int");

                    b.Property<int>("SalesChannelID")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UplineID")
                        .HasColumnType("int");

                    b.Property<string>("UplineMerchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentID");

                    b.HasIndex("AgentLevelID");

                    b.HasIndex("AgentStatusID");

                    b.HasIndex("OfficeCode");

                    b.HasIndex("SalesChannelID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("UplineID");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AgentLevel", b =>
                {
                    b.Property<int>("AgentLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentLevelID"));

                    b.Property<string>("LevelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentLevelID");

                    b.ToTable("AgentLevels");

                    b.HasData(
                        new
                        {
                            AgentLevelID = 1,
                            LevelDescription = "Trainee"
                        },
                        new
                        {
                            AgentLevelID = 2,
                            LevelDescription = "Trainer"
                        },
                        new
                        {
                            AgentLevelID = 3,
                            LevelDescription = "Trainee Owner"
                        },
                        new
                        {
                            AgentLevelID = 4,
                            LevelDescription = "Owner"
                        },
                        new
                        {
                            AgentLevelID = 5,
                            LevelDescription = "Promoting Owner"
                        },
                        new
                        {
                            AgentLevelID = 6,
                            LevelDescription = "Divisional Owner"
                        },
                        new
                        {
                            AgentLevelID = 7,
                            LevelDescription = "Vice President"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AgentStatus", b =>
                {
                    b.Property<int>("AgentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentStatusID"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentStatusID");

                    b.ToTable("AgentStatuses");

                    b.HasData(
                        new
                        {
                            AgentStatusID = 1,
                            StatusDescription = "Active"
                        },
                        new
                        {
                            AgentStatusID = 2,
                            StatusDescription = "Inactive"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTrailID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AgentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditTrailID");

                    b.HasIndex("AgentID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Benefit", b =>
                {
                    b.Property<int>("BenefitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitID"));

                    b.Property<string>("BenefitDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("BenefitID");

                    b.HasIndex("PlanID");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Commission", b =>
                {
                    b.Property<int>("CommissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<int?>("AgentLevelID")
                        .HasColumnType("int");

                    b.Property<int>("AgentStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("CommissionStatusID")
                        .HasColumnType("int");

                    b.Property<decimal>("Commissions")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DebiCheckPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("EarnedTypeID")
                        .HasColumnType("int");

                    b.Property<int>("GuaranteedCommission")
                        .HasColumnType("int");

                    b.Property<bool>("IsTrainer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainerOwner")
                        .HasColumnType("bit");

                    b.Property<int>("MerchCode")
                        .HasColumnType("int");

                    b.Property<int>("Override")
                        .HasColumnType("int");

                    b.Property<int?>("PayoutRuleID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSalesID")
                        .HasColumnType("int");

                    b.Property<decimal>("SR")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Sales")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SalesChannelID")
                        .HasColumnType("int");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalEarnings")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("YearWeekID")
                        .HasColumnType("int");

                    b.HasKey("CommissionID");

                    b.HasIndex("AgentID");

                    b.HasIndex("AgentLevelID");

                    b.HasIndex("AgentStatusID");

                    b.HasIndex("CommissionStatusID");

                    b.HasIndex("EarnedTypeID");

                    b.HasIndex("PayoutRuleID");

                    b.HasIndex("ProductCategoryID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SalesChannelID");

                    b.HasIndex("YearWeekID");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.CommissionRate", b =>
                {
                    b.Property<int>("CommissionRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionRateID"));

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CommissionRateID");

                    b.HasIndex("ProductID");

                    b.ToTable("CommissionRates");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.CommissionStatus", b =>
                {
                    b.Property<int>("CommissionStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommissionStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommissionStatusID");

                    b.ToTable("CommissionStatuses");

                    b.HasData(
                        new
                        {
                            CommissionStatusID = 1,
                            Description = "Pending"
                        },
                        new
                        {
                            CommissionStatusID = 2,
                            Description = "Approved"
                        },
                        new
                        {
                            CommissionStatusID = 3,
                            Description = "Rejected"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ContactPlan", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.HasKey("ContactID", "PlanID");

                    b.HasIndex("PlanID");

                    b.ToTable("ContactPlans");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.EarnedType", b =>
                {
                    b.Property<int?>("EarnedTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("EarnedTypeID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EarnedTypeID");

                    b.ToTable("EarnedTypes");

                    b.HasData(
                        new
                        {
                            EarnedTypeID = 1,
                            Description = "Commissions"
                        },
                        new
                        {
                            EarnedTypeID = 2,
                            Description = "Overrides"
                        },
                        new
                        {
                            EarnedTypeID = 3,
                            Description = "Guaranteed Commission"
                        },
                        new
                        {
                            EarnedTypeID = 4,
                            Description = "Attendance Bonus"
                        },
                        new
                        {
                            EarnedTypeID = 5,
                            Description = "Performance Bonus"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Help", b =>
                {
                    b.Property<int>("HelpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpID"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HelpCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HelpID");

                    b.HasIndex("HelpCategoryID");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.HelpCategory", b =>
                {
                    b.Property<int>("HelpCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HelpCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HelpCategoryID");

                    b.ToTable("HelpCategories");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Hierarchy", b =>
                {
                    b.Property<int>("HierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HierarchyID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<double>("DialTime")
                        .HasColumnType("float");

                    b.Property<int>("ParentLevelID")
                        .HasColumnType("int");

                    b.Property<int>("ParentMerchCode")
                        .HasColumnType("int");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TTB")
                        .HasColumnType("float");

                    b.HasKey("HierarchyID");

                    b.HasIndex("AgentID");

                    b.HasIndex("ParentLevelID");

                    b.ToTable("Hierarchies");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Juice", b =>
                {
                    b.Property<int>("JuiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JuiceID"));

                    b.Property<string>("JuiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("JuicePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("JuiceID");

                    b.ToTable("Juices");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Mandate", b =>
                {
                    b.Property<int>("MandateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MandateID"));

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("MandateID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ProductID");

                    b.ToTable("Mandates");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.MerchCode", b =>
                {
                    b.Property<int>("MerchCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MerchCodeID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchLevelID")
                        .HasColumnType("int");

                    b.HasKey("MerchCodeID");

                    b.HasIndex("MerchLevelID");

                    b.ToTable("MerchCodes");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.MerchLevel", b =>
                {
                    b.Property<int>("MerchLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MerchLevelID"));

                    b.Property<string>("LevelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MerchLevelID");

                    b.ToTable("MerchLevels");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeId"));

                    b.Property<int?>("OfficeCode")
                        .HasColumnType("int");

                    b.Property<string>("OfficeLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.HasKey("OfficeId");

                    b.HasIndex("OwnerID");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            OfficeCode = 1,
                            OfficeLocation = "NW",
                            OwnerID = 1
                        },
                        new
                        {
                            OfficeId = 2,
                            OfficeCode = 2,
                            OfficeLocation = "L",
                            OwnerID = 2
                        },
                        new
                        {
                            OfficeId = 3,
                            OfficeCode = 3,
                            OfficeLocation = "GP",
                            OwnerID = 3
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.OfficeProvince", b =>
                {
                    b.Property<int?>("OfficeCode")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("int");

                    b.HasKey("OfficeCode", "ProvinceID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("OfficeProvinces");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerID"));

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerTypeID")
                        .HasColumnType("int");

                    b.HasKey("OwnerID");

                    b.HasIndex("OwnerTypeID");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerID = 1,
                            OwnerName = "Promotional owner",
                            OwnerTypeID = 1
                        },
                        new
                        {
                            OwnerID = 2,
                            OwnerName = "Trainer Owner",
                            OwnerTypeID = 2
                        },
                        new
                        {
                            OwnerID = 3,
                            OwnerName = "Divisional Owner",
                            OwnerTypeID = 3
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.OwnerType", b =>
                {
                    b.Property<int>("OwnerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerTypeID"));

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OwnerTypeID");

                    b.ToTable("OwnerTypes");

                    b.HasData(
                        new
                        {
                            OwnerTypeID = 1,
                            TypeDescription = "Promotional owner"
                        },
                        new
                        {
                            OwnerTypeID = 2,
                            TypeDescription = "Trainer Owner"
                        },
                        new
                        {
                            OwnerTypeID = 3,
                            TypeDescription = "Divisional Owner"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ParentLevel", b =>
                {
                    b.Property<int>("ParentLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentLevelID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentLevelID");

                    b.ToTable("ParentLevels");

                    b.HasData(
                        new
                        {
                            ParentLevelID = 1,
                            Description = "Trainer"
                        },
                        new
                        {
                            ParentLevelID = 2,
                            Description = "Trainer Owner"
                        },
                        new
                        {
                            ParentLevelID = 3,
                            Description = "Promoting Owner"
                        },
                        new
                        {
                            ParentLevelID = 4,
                            Description = "Divisional Owner"
                        },
                        new
                        {
                            ParentLevelID = 5,
                            Description = "Vice President"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.PayoutRule", b =>
                {
                    b.Property<int>("PayoutRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayoutRuleID"));

                    b.Property<decimal>("PayoutPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RuleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayoutRuleID");

                    b.ToTable("PayoutRules");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Plan", b =>
                {
                    b.Property<int?>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PlanID"));

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanID");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Policy", b =>
                {
                    b.Property<int>("PolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyID"));

                    b.Property<decimal>("PolicyAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicyID");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductCategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryID");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductCategoryID = 1,
                            CategoryName = "Motor"
                        },
                        new
                        {
                            ProductCategoryID = 2,
                            CategoryName = "Non-Motor"
                        },
                        new
                        {
                            ProductCategoryID = 3,
                            CategoryName = "Persal"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ProductSales", b =>
                {
                    b.Property<int>("ProductSalesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSalesID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SalesChannelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductSalesID");

                    b.HasIndex("AgentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SalesChannelID");

                    b.ToTable("ProductSales");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromotionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionID");

                    b.HasIndex("AgentID");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            ProvinceID = 1,
                            ProvinceName = "NW"
                        },
                        new
                        {
                            ProvinceID = 2,
                            ProvinceName = "NC"
                        },
                        new
                        {
                            ProvinceID = 3,
                            ProvinceName = "FS"
                        },
                        new
                        {
                            ProvinceID = 4,
                            ProvinceName = "WC"
                        },
                        new
                        {
                            ProvinceID = 5,
                            ProvinceName = "EC"
                        },
                        new
                        {
                            ProvinceID = 6,
                            ProvinceName = "KZN"
                        },
                        new
                        {
                            ProvinceID = 7,
                            ProvinceName = "MP"
                        },
                        new
                        {
                            ProvinceID = 8,
                            ProvinceName = "GP"
                        },
                        new
                        {
                            ProvinceID = 9,
                            ProvinceName = "L"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Query", b =>
                {
                    b.Property<int>("QueryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("QueryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QueryStatusID")
                        .HasColumnType("int");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueryID");

                    b.HasIndex("AgentID");

                    b.HasIndex("QueryStatusID");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.QueryStatus", b =>
                {
                    b.Property<int>("QueryStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryStatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueryStatusID");

                    b.ToTable("QueryStatuses");

                    b.HasData(
                        new
                        {
                            QueryStatusID = 1,
                            StatusName = "Open"
                        },
                        new
                        {
                            QueryStatusID = 2,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            QueryStatusID = 3,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Reward", b =>
                {
                    b.Property<int>("RewardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<decimal>("RewardAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RewardDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RewardTypeID")
                        .HasColumnType("int");

                    b.HasKey("RewardID");

                    b.HasIndex("AgentID");

                    b.HasIndex("RewardTypeID");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.RewardType", b =>
                {
                    b.Property<int>("RewardTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardTypeID"));

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardTypeID");

                    b.ToTable("RewardTypes");

                    b.HasData(
                        new
                        {
                            RewardTypeID = 1,
                            TypeDescription = "Bonus"
                        },
                        new
                        {
                            RewardTypeID = 2,
                            TypeDescription = "Promotion"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.SalesChannel", b =>
                {
                    b.Property<int>("SalesChannelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesChannelID"));

                    b.Property<string>("ChannelDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesChannelID");

                    b.ToTable("SalesChannels");

                    b.HasData(
                        new
                        {
                            SalesChannelID = 1,
                            ChannelDescription = "Telesale"
                        },
                        new
                        {
                            SalesChannelID = 2,
                            ChannelDescription = "Face-to-Face"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.SalesTarget", b =>
                {
                    b.Property<int>("SalesTargetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesTargetID"));

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesTargetID");

                    b.HasIndex("AgentID");

                    b.ToTable("SalesTargets");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleID");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            ScheduleID = 1,
                            Description = "Weekly"
                        },
                        new
                        {
                            ScheduleID = 2,
                            Description = "Monthly"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            TestName = "Sales Manual Test"
                        },
                        new
                        {
                            TestID = 2,
                            TestName = "Trainer Manual Test"
                        },
                        new
                        {
                            TestID = 3,
                            TestName = "Owner's Manual Test"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestAccess", b =>
                {
                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<int>("AgentLevelID")
                        .HasColumnType("int");

                    b.HasKey("TestID", "AgentLevelID");

                    b.HasIndex("AgentLevelID");

                    b.ToTable("TestAccesses");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            AgentLevelID = 1
                        },
                        new
                        {
                            TestID = 2,
                            AgentLevelID = 2
                        },
                        new
                        {
                            TestID = 3,
                            AgentLevelID = 3
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestAnswer", b =>
                {
                    b.Property<int>("TestAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestAnswerID"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("TestQuestionID")
                        .HasColumnType("int");

                    b.HasKey("TestAnswerID");

                    b.HasIndex("TestQuestionID");

                    b.ToTable("TestAnswers");

                    b.HasData(
                        new
                        {
                            TestAnswerID = 1,
                            AnswerText = "R200",
                            IsCorrect = true,
                            TestQuestionID = 1
                        },
                        new
                        {
                            TestAnswerID = 2,
                            AnswerText = "150 minutes",
                            IsCorrect = true,
                            TestQuestionID = 2
                        },
                        new
                        {
                            TestAnswerID = 3,
                            AnswerText = "R100",
                            IsCorrect = true,
                            TestQuestionID = 3
                        },
                        new
                        {
                            TestAnswerID = 4,
                            AnswerText = "R300",
                            IsCorrect = true,
                            TestQuestionID = 4
                        },
                        new
                        {
                            TestAnswerID = 5,
                            AnswerText = "60%",
                            IsCorrect = true,
                            TestQuestionID = 5
                        },
                        new
                        {
                            TestAnswerID = 6,
                            AnswerText = "R450",
                            IsCorrect = true,
                            TestQuestionID = 6
                        },
                        new
                        {
                            TestAnswerID = 7,
                            AnswerText = "13 days",
                            IsCorrect = true,
                            TestQuestionID = 7
                        },
                        new
                        {
                            TestAnswerID = 8,
                            AnswerText = "R400",
                            IsCorrect = true,
                            TestQuestionID = 8
                        },
                        new
                        {
                            TestAnswerID = 9,
                            AnswerText = "19 personal adjusted pieces and 50% SR",
                            IsCorrect = true,
                            TestQuestionID = 9
                        },
                        new
                        {
                            TestAnswerID = 10,
                            AnswerText = "19",
                            IsCorrect = true,
                            TestQuestionID = 10
                        },
                        new
                        {
                            TestAnswerID = 11,
                            AnswerText = "R200",
                            IsCorrect = true,
                            TestQuestionID = 11
                        },
                        new
                        {
                            TestAnswerID = 12,
                            AnswerText = "R350",
                            IsCorrect = true,
                            TestQuestionID = 12
                        },
                        new
                        {
                            TestAnswerID = 13,
                            AnswerText = "85%",
                            IsCorrect = true,
                            TestQuestionID = 13
                        },
                        new
                        {
                            TestAnswerID = 14,
                            AnswerText = "27 personal adjusted pieces and 50% SR",
                            IsCorrect = true,
                            TestQuestionID = 14
                        },
                        new
                        {
                            TestAnswerID = 15,
                            AnswerText = "R575",
                            IsCorrect = true,
                            TestQuestionID = 15
                        },
                        new
                        {
                            TestAnswerID = 16,
                            AnswerText = "20 days",
                            IsCorrect = true,
                            TestQuestionID = 16
                        },
                        new
                        {
                            TestAnswerID = 17,
                            AnswerText = "R350",
                            IsCorrect = true,
                            TestQuestionID = 17
                        },
                        new
                        {
                            TestAnswerID = 18,
                            AnswerText = "27",
                            IsCorrect = true,
                            TestQuestionID = 18
                        },
                        new
                        {
                            TestAnswerID = 19,
                            AnswerText = "R550",
                            IsCorrect = true,
                            TestQuestionID = 19
                        },
                        new
                        {
                            TestAnswerID = 20,
                            AnswerText = "120 to 149 minutes",
                            IsCorrect = true,
                            TestQuestionID = 20
                        },
                        new
                        {
                            TestAnswerID = 21,
                            AnswerText = "R200",
                            IsCorrect = true,
                            TestQuestionID = 21
                        },
                        new
                        {
                            TestAnswerID = 22,
                            AnswerText = "R300",
                            IsCorrect = true,
                            TestQuestionID = 22
                        },
                        new
                        {
                            TestAnswerID = 23,
                            AnswerText = "50%",
                            IsCorrect = true,
                            TestQuestionID = 23
                        },
                        new
                        {
                            TestAnswerID = 24,
                            AnswerText = "16 personal adjusted pieces and 50% SR",
                            IsCorrect = true,
                            TestQuestionID = 24
                        },
                        new
                        {
                            TestAnswerID = 25,
                            AnswerText = "R450",
                            IsCorrect = true,
                            TestQuestionID = 25
                        },
                        new
                        {
                            TestAnswerID = 26,
                            AnswerText = "20 days",
                            IsCorrect = true,
                            TestQuestionID = 26
                        },
                        new
                        {
                            TestAnswerID = 27,
                            AnswerText = "R350",
                            IsCorrect = true,
                            TestQuestionID = 27
                        },
                        new
                        {
                            TestAnswerID = 28,
                            AnswerText = "16",
                            IsCorrect = true,
                            TestQuestionID = 28
                        },
                        new
                        {
                            TestAnswerID = 29,
                            AnswerText = "R400",
                            IsCorrect = true,
                            TestQuestionID = 29
                        },
                        new
                        {
                            TestAnswerID = 30,
                            AnswerText = "150 minutes",
                            IsCorrect = true,
                            TestQuestionID = 30
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestWrongAnswer", b =>
                {
                    b.Property<int>("TestWrongAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestWrongAnswerID"));

                    b.Property<int>("TestQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("WrongAnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestWrongAnswerID");

                    b.HasIndex("TestQuestionID");

                    b.ToTable("TestWrongAnswers");

                    b.HasData(
                        new
                        {
                            TestWrongAnswerID = 1,
                            TestQuestionID = 1,
                            WrongAnswerText = "R150"
                        },
                        new
                        {
                            TestWrongAnswerID = 2,
                            TestQuestionID = 1,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 3,
                            TestQuestionID = 1,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 4,
                            TestQuestionID = 2,
                            WrongAnswerText = "120 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 5,
                            TestQuestionID = 2,
                            WrongAnswerText = "100 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 6,
                            TestQuestionID = 2,
                            WrongAnswerText = "200 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 7,
                            TestQuestionID = 3,
                            WrongAnswerText = "R150"
                        },
                        new
                        {
                            TestWrongAnswerID = 8,
                            TestQuestionID = 3,
                            WrongAnswerText = "R50"
                        },
                        new
                        {
                            TestWrongAnswerID = 9,
                            TestQuestionID = 3,
                            WrongAnswerText = "R200"
                        },
                        new
                        {
                            TestWrongAnswerID = 10,
                            TestQuestionID = 4,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 11,
                            TestQuestionID = 4,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 12,
                            TestQuestionID = 4,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 13,
                            TestQuestionID = 5,
                            WrongAnswerText = "50%"
                        },
                        new
                        {
                            TestWrongAnswerID = 14,
                            TestQuestionID = 5,
                            WrongAnswerText = "70%"
                        },
                        new
                        {
                            TestWrongAnswerID = 15,
                            TestQuestionID = 5,
                            WrongAnswerText = "80%"
                        },
                        new
                        {
                            TestWrongAnswerID = 16,
                            TestQuestionID = 6,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 17,
                            TestQuestionID = 6,
                            WrongAnswerText = "R500"
                        },
                        new
                        {
                            TestWrongAnswerID = 18,
                            TestQuestionID = 6,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 19,
                            TestQuestionID = 7,
                            WrongAnswerText = "20 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 20,
                            TestQuestionID = 7,
                            WrongAnswerText = "15 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 21,
                            TestQuestionID = 7,
                            WrongAnswerText = "10 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 22,
                            TestQuestionID = 8,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 23,
                            TestQuestionID = 8,
                            WrongAnswerText = "R450"
                        },
                        new
                        {
                            TestWrongAnswerID = 24,
                            TestQuestionID = 8,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 25,
                            TestQuestionID = 9,
                            WrongAnswerText = "20 personal adjusted pieces and 60% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 26,
                            TestQuestionID = 9,
                            WrongAnswerText = "18 personal adjusted pieces and 55% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 27,
                            TestQuestionID = 9,
                            WrongAnswerText = "25 personal adjusted pieces and 70% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 28,
                            TestQuestionID = 10,
                            WrongAnswerText = "20"
                        },
                        new
                        {
                            TestWrongAnswerID = 29,
                            TestQuestionID = 10,
                            WrongAnswerText = "25"
                        },
                        new
                        {
                            TestWrongAnswerID = 30,
                            TestQuestionID = 10,
                            WrongAnswerText = "15"
                        },
                        new
                        {
                            TestWrongAnswerID = 31,
                            TestQuestionID = 11,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 32,
                            TestQuestionID = 11,
                            WrongAnswerText = "R150"
                        },
                        new
                        {
                            TestWrongAnswerID = 33,
                            TestQuestionID = 11,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 34,
                            TestQuestionID = 12,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 35,
                            TestQuestionID = 12,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 36,
                            TestQuestionID = 12,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 37,
                            TestQuestionID = 13,
                            WrongAnswerText = "75%"
                        },
                        new
                        {
                            TestWrongAnswerID = 38,
                            TestQuestionID = 13,
                            WrongAnswerText = "95%"
                        },
                        new
                        {
                            TestWrongAnswerID = 39,
                            TestQuestionID = 13,
                            WrongAnswerText = "90%"
                        },
                        new
                        {
                            TestWrongAnswerID = 40,
                            TestQuestionID = 14,
                            WrongAnswerText = "25 personal adjusted pieces and 60% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 41,
                            TestQuestionID = 14,
                            WrongAnswerText = "20 personal adjusted pieces and 55% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 42,
                            TestQuestionID = 14,
                            WrongAnswerText = "30 personal adjusted pieces and 70% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 43,
                            TestQuestionID = 15,
                            WrongAnswerText = "R500"
                        },
                        new
                        {
                            TestWrongAnswerID = 44,
                            TestQuestionID = 15,
                            WrongAnswerText = "R600"
                        },
                        new
                        {
                            TestWrongAnswerID = 45,
                            TestQuestionID = 15,
                            WrongAnswerText = "R550"
                        },
                        new
                        {
                            TestWrongAnswerID = 46,
                            TestQuestionID = 16,
                            WrongAnswerText = "15 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 47,
                            TestQuestionID = 16,
                            WrongAnswerText = "25 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 48,
                            TestQuestionID = 16,
                            WrongAnswerText = "10 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 49,
                            TestQuestionID = 17,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 50,
                            TestQuestionID = 17,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 51,
                            TestQuestionID = 17,
                            WrongAnswerText = "R200"
                        },
                        new
                        {
                            TestWrongAnswerID = 52,
                            TestQuestionID = 18,
                            WrongAnswerText = "20"
                        },
                        new
                        {
                            TestWrongAnswerID = 53,
                            TestQuestionID = 18,
                            WrongAnswerText = "25"
                        },
                        new
                        {
                            TestWrongAnswerID = 54,
                            TestQuestionID = 18,
                            WrongAnswerText = "15"
                        },
                        new
                        {
                            TestWrongAnswerID = 55,
                            TestQuestionID = 19,
                            WrongAnswerText = "R500"
                        },
                        new
                        {
                            TestWrongAnswerID = 56,
                            TestQuestionID = 19,
                            WrongAnswerText = "R600"
                        },
                        new
                        {
                            TestWrongAnswerID = 57,
                            TestQuestionID = 19,
                            WrongAnswerText = "R450"
                        },
                        new
                        {
                            TestWrongAnswerID = 58,
                            TestQuestionID = 20,
                            WrongAnswerText = "100 to 119 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 59,
                            TestQuestionID = 20,
                            WrongAnswerText = "150 to 179 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 60,
                            TestQuestionID = 20,
                            WrongAnswerText = "90 to 119 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 61,
                            TestQuestionID = 21,
                            WrongAnswerText = "R150"
                        },
                        new
                        {
                            TestWrongAnswerID = 62,
                            TestQuestionID = 21,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 63,
                            TestQuestionID = 21,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 64,
                            TestQuestionID = 22,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 65,
                            TestQuestionID = 22,
                            WrongAnswerText = "R250"
                        },
                        new
                        {
                            TestWrongAnswerID = 66,
                            TestQuestionID = 22,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 67,
                            TestQuestionID = 23,
                            WrongAnswerText = "60%"
                        },
                        new
                        {
                            TestWrongAnswerID = 68,
                            TestQuestionID = 23,
                            WrongAnswerText = "40%"
                        },
                        new
                        {
                            TestWrongAnswerID = 69,
                            TestQuestionID = 23,
                            WrongAnswerText = "70%"
                        },
                        new
                        {
                            TestWrongAnswerID = 70,
                            TestQuestionID = 24,
                            WrongAnswerText = "15 personal adjusted pieces and 60% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 71,
                            TestQuestionID = 24,
                            WrongAnswerText = "17 personal adjusted pieces and 55% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 72,
                            TestQuestionID = 24,
                            WrongAnswerText = "18 personal adjusted pieces and 70% SR"
                        },
                        new
                        {
                            TestWrongAnswerID = 73,
                            TestQuestionID = 25,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 74,
                            TestQuestionID = 25,
                            WrongAnswerText = "R500"
                        },
                        new
                        {
                            TestWrongAnswerID = 75,
                            TestQuestionID = 25,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 76,
                            TestQuestionID = 26,
                            WrongAnswerText = "15 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 77,
                            TestQuestionID = 26,
                            WrongAnswerText = "25 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 78,
                            TestQuestionID = 26,
                            WrongAnswerText = "10 days"
                        },
                        new
                        {
                            TestWrongAnswerID = 79,
                            TestQuestionID = 27,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 80,
                            TestQuestionID = 27,
                            WrongAnswerText = "R400"
                        },
                        new
                        {
                            TestWrongAnswerID = 81,
                            TestQuestionID = 27,
                            WrongAnswerText = "R200"
                        },
                        new
                        {
                            TestWrongAnswerID = 82,
                            TestQuestionID = 28,
                            WrongAnswerText = "15"
                        },
                        new
                        {
                            TestWrongAnswerID = 83,
                            TestQuestionID = 28,
                            WrongAnswerText = "20"
                        },
                        new
                        {
                            TestWrongAnswerID = 84,
                            TestQuestionID = 28,
                            WrongAnswerText = "25"
                        },
                        new
                        {
                            TestWrongAnswerID = 85,
                            TestQuestionID = 29,
                            WrongAnswerText = "R350"
                        },
                        new
                        {
                            TestWrongAnswerID = 86,
                            TestQuestionID = 29,
                            WrongAnswerText = "R450"
                        },
                        new
                        {
                            TestWrongAnswerID = 87,
                            TestQuestionID = 29,
                            WrongAnswerText = "R300"
                        },
                        new
                        {
                            TestWrongAnswerID = 88,
                            TestQuestionID = 30,
                            WrongAnswerText = "100 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 89,
                            TestQuestionID = 30,
                            WrongAnswerText = "200 minutes"
                        },
                        new
                        {
                            TestWrongAnswerID = 90,
                            TestQuestionID = 30,
                            WrongAnswerText = "120 minutes"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AgentID")
                        .HasColumnType("int");

                    b.Property<int?>("AgentID1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerificationCodeExpiration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgentID");

                    b.HasIndex("AgentID1")
                        .IsUnique()
                        .HasFilter("[AgentID1] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserProfileID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.UserProfile", b =>
                {
                    b.Property<int?>("UserProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserProfileID"));

                    b.Property<string>("ProfileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserProfileID");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserProfileID = 1,
                            ProfileDescription = "System Administrator"
                        },
                        new
                        {
                            UserProfileID = 2,
                            ProfileDescription = "Payroll Manager"
                        },
                        new
                        {
                            UserProfileID = 3,
                            ProfileDescription = "User"
                        },
                        new
                        {
                            UserProfileID = 4,
                            ProfileDescription = "Super User"
                        },
                        new
                        {
                            UserProfileID = 5,
                            ProfileDescription = "Owner"
                        },
                        new
                        {
                            UserProfileID = 6,
                            ProfileDescription = "Agent User"
                        });
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.VAT", b =>
                {
                    b.Property<int>("VATID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VATID"));

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("VATID");

                    b.ToTable("VATs");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.YearWeek", b =>
                {
                    b.Property<int>("YearWeekID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YearWeekID"));

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("YearWeekID");

                    b.ToTable("YearWeeks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestQuestion", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Agent", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.AgentLevel", "AgentLevel")
                        .WithMany("Agents")
                        .HasForeignKey("AgentLevelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.AgentStatus", "AgentStatus")
                        .WithMany("Agents")
                        .HasForeignKey("AgentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Office", "Office")
                        .WithMany("Agents")
                        .HasForeignKey("OfficeCode");

                    b.HasOne("TheUnlimited_Backend_.Models.SalesChannel", "SalesChannel")
                        .WithMany("Agents")
                        .HasForeignKey("SalesChannelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Schedule", "Schedule")
                        .WithMany("Agents")
                        .HasForeignKey("ScheduleID");

                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Upline")
                        .WithMany("Agents")
                        .HasForeignKey("UplineID");

                    b.Navigation("AgentLevel");

                    b.Navigation("AgentStatus");

                    b.Navigation("Office");

                    b.Navigation("SalesChannel");

                    b.Navigation("Schedule");

                    b.Navigation("Upline");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AuditTrail", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("AuditTrails")
                        .HasForeignKey("AgentID");

                    b.HasOne("TheUnlimited_Backend_.Models.User", "Users")
                        .WithMany("AuditTrails")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Benefit", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Plan", "Plan")
                        .WithMany("Benefits")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Commission", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("Commissions")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.AgentLevel", "AgentLevel")
                        .WithMany("Commissions")
                        .HasForeignKey("AgentLevelID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TheUnlimited_Backend_.Models.AgentStatus", "AgentStatus")
                        .WithMany("Commissions")
                        .HasForeignKey("AgentStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.CommissionStatus", "CommissionStatus")
                        .WithMany("Commissions")
                        .HasForeignKey("CommissionStatusID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TheUnlimited_Backend_.Models.EarnedType", null)
                        .WithMany("Commissions")
                        .HasForeignKey("EarnedTypeID");

                    b.HasOne("TheUnlimited_Backend_.Models.PayoutRule", null)
                        .WithMany("Commissions")
                        .HasForeignKey("PayoutRuleID");

                    b.HasOne("TheUnlimited_Backend_.Models.ProductCategory", "ProductCategory")
                        .WithMany("Commissions")
                        .HasForeignKey("ProductCategoryID");

                    b.HasOne("TheUnlimited_Backend_.Models.Product", "Product")
                        .WithMany("Commissions")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.ProductSales", "ProductSales")
                        .WithMany("Commissions")
                        .HasForeignKey("SalesChannelID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TheUnlimited_Backend_.Models.SalesChannel", "SalesChannel")
                        .WithMany()
                        .HasForeignKey("SalesChannelID");

                    b.HasOne("TheUnlimited_Backend_.Models.YearWeek", null)
                        .WithMany("Commissions")
                        .HasForeignKey("YearWeekID");

                    b.Navigation("Agent");

                    b.Navigation("AgentLevel");

                    b.Navigation("AgentStatus");

                    b.Navigation("CommissionStatus");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductSales");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.CommissionRate", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ContactPlan", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Contact", "Contact")
                        .WithMany("ContactPlans")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Plan", "Plan")
                        .WithMany("ContactPlans")
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Help", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.HelpCategory", "HelpCategory")
                        .WithMany("Helps")
                        .HasForeignKey("HelpCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HelpCategory");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Hierarchy", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("Hierarchies")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.ParentLevel", "ParentLevel")
                        .WithMany("Hierarchies")
                        .HasForeignKey("ParentLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("ParentLevel");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Mandate", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Contact", "Contact")
                        .WithMany("Mandates")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Product", "Product")
                        .WithMany("Mandates")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.MerchCode", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.MerchLevel", "MerchLevel")
                        .WithMany("MerchCodes")
                        .HasForeignKey("MerchLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchLevel");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Office", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Owner", "Owner")
                        .WithMany("Offices")
                        .HasForeignKey("OwnerID");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.OfficeProvince", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Office", "Office")
                        .WithMany("OfficeProvinces")
                        .HasForeignKey("OfficeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Province", "Province")
                        .WithMany("OfficeProvinces")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Owner", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.OwnerType", "OwnerType")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerType");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Product", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ProductSales", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("ProductSales")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Product", "Product")
                        .WithMany("ProductSales")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.SalesChannel", "SalesChannel")
                        .WithMany("ProductSales")
                        .HasForeignKey("SalesChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Product");

                    b.Navigation("SalesChannel");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Promotion", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Query", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("Queries")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.QueryStatus", "QueryStatus")
                        .WithMany("Queries")
                        .HasForeignKey("QueryStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("QueryStatus");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Reward", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("Rewards")
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.RewardType", "RewardType")
                        .WithMany("Rewards")
                        .HasForeignKey("RewardTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("RewardType");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.SalesTarget", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestAccess", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.AgentLevel", "AgentLevel")
                        .WithMany("TestAccesses")
                        .HasForeignKey("AgentLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheUnlimited_Backend_.Models.Test", "Test")
                        .WithMany("TestAccesses")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgentLevel");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestAnswer", b =>
                {
                    b.HasOne("TestQuestion", "TestQuestion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.TestWrongAnswer", b =>
                {
                    b.HasOne("TestQuestion", "TestQuestion")
                        .WithMany("TestWrongAnswers")
                        .HasForeignKey("TestQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestQuestion");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.User", b =>
                {
                    b.HasOne("TheUnlimited_Backend_.Models.Agent", "Agent")
                        .WithMany("Users")
                        .HasForeignKey("AgentID");

                    b.HasOne("TheUnlimited_Backend_.Models.Agent", null)
                        .WithOne("User")
                        .HasForeignKey("TheUnlimited_Backend_.Models.User", "AgentID1");

                    b.HasOne("TheUnlimited_Backend_.Models.UserProfile", "UserProfile")
                        .WithMany("Users")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("TestQuestion", b =>
                {
                    b.Navigation("TestAnswers");

                    b.Navigation("TestWrongAnswers");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Agent", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("AuditTrails");

                    b.Navigation("Commissions");

                    b.Navigation("Hierarchies");

                    b.Navigation("ProductSales");

                    b.Navigation("Queries");

                    b.Navigation("Rewards");

                    b.Navigation("User")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AgentLevel", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Commissions");

                    b.Navigation("TestAccesses");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.AgentStatus", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.CommissionStatus", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Contact", b =>
                {
                    b.Navigation("ContactPlans");

                    b.Navigation("Mandates");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.EarnedType", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.HelpCategory", b =>
                {
                    b.Navigation("Helps");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.MerchLevel", b =>
                {
                    b.Navigation("MerchCodes");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Office", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("OfficeProvinces");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Owner", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.OwnerType", b =>
                {
                    b.Navigation("Owners");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ParentLevel", b =>
                {
                    b.Navigation("Hierarchies");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.PayoutRule", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Plan", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("ContactPlans");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Product", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Mandates");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ProductCategory", b =>
                {
                    b.Navigation("Commissions");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.ProductSales", b =>
                {
                    b.Navigation("Commissions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Province", b =>
                {
                    b.Navigation("OfficeProvinces");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.QueryStatus", b =>
                {
                    b.Navigation("Queries");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.RewardType", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.SalesChannel", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("ProductSales");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Schedule", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.Test", b =>
                {
                    b.Navigation("TestAccesses");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.User", b =>
                {
                    b.Navigation("AuditTrails");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.UserProfile", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TheUnlimited_Backend_.Models.YearWeek", b =>
                {
                    b.Navigation("Commissions");
                });
#pragma warning restore 612, 618
        }
    }
}
